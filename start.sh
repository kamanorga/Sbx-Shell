#!/bin/bash  

echo "ZXhwb3J0IFVVSUQ9JHtVVUlEOi0nZmRlZWRhNDUtMGE4ZS00NTcwLWJjYzYtZDY4Yzk5NWY1ODMwJ30KZXhwb3J0IE5FWkhBX1NFUlZFUj0ke05FWkhBX1NFUlZFUjotJyd9CmV4cG9ydCBORVpIQV9QT1JUPSR7TkVaSEFfUE9SVDotJyd9CmV4cG9ydCBORVpIQV9LRVk9JHtORVpIQV9LRVk6LScnfQpleHBvcnQgQVJHT19ET01BSU49JHtBUkdPX0RPTUFJTjotJyd9CmV4cG9ydCBBUkdPX0FVVEg9JHtBUkdPX0FVVEg6LScnfQpleHBvcnQgQ0ZJUD0ke0NGSVA6LSdjZi44Nzc3NzQueHl6J30KZXhwb3J0IENGUE9SVD0ke0NGUE9SVDotJzQ0Myd9CmV4cG9ydCBOQU1FPSR7TkFNRTotJyd9CmV4cG9ydCBGSUxFX1BBVEg9JHtGSUxFX1BBVEg6LScuLy5ucG0nfQpleHBvcnQgQVJHT19QT1JUPSR7QVJHT19QT1JUOi0nODAwMSd9CmV4cG9ydCBUVUlDX1BPUlQ9JHtUVUlDX1BPUlQ6LScnfQpleHBvcnQgSFkyX1BPUlQ9JHtIWTJfUE9SVDotJyd9CmV4cG9ydCBSRUFMSVRZX1BPUlQ9JHtSRUFMSVRZX1BPUlQ6LScnfQpleHBvcnQgQ0hBVF9JRD0ke0NIQVRfSUQ6LScnfQpleHBvcnQgQk9UX1RPS0VOPSR7Qk9UX1RPS0VOOi0nJ30KZXhwb3J0IFVQTE9BRF9VUkw9JHtVUExPQURfVVJMOi0nJ30KZXhwb3J0IERJU0FCTEVfQVJHTz0ke0RJU0FCTEVfQVJHTzotJ2ZhbHNlJ30KCmlmIFsgLWYgIi5lbnYiIF07IHRoZW4KICAgIHNldCAtbyBhbGxleHBvcnQgCiAgICBzb3VyY2UgPChncmVwIC12ICdeIycgLmVudiB8IHNlZCAncy9eZXhwb3J0IC8vJyApCiAgICBzZXQgK28gYWxsZXhwb3J0ICAKZmkKClsgISAtZCAiJHtGSUxFX1BBVEh9IiBdICYmIG1rZGlyIC1wICIke0ZJTEVfUEFUSH0iCgpkZWxldGVfb2xkX25vZGVzKCkgewogIFtbIC16ICRVUExPQURfVVJMIHx8ICEgLWYgIiR7RklMRV9QQVRIfS9zdWIudHh0IiBdXSAmJiByZXR1cm4KICBvbGRfbm9kZXM9JChiYXNlNjQgLWQgIiR7RklMRV9QQVRIfS9zdWIudHh0IiB8IGdyZXAgLUUgJyh2bGVzc3x2bWVzc3x0cm9qYW58aHlzdGVyaWEyfHR1aWMpOi8vJykKICBbWyAteiAkb2xkX25vZGVzIF1dICYmIHJldHVybgoKICBqc29uX2RhdGE9J3sibm9kZXMiOiBbJwogIGZvciBub2RlIGluICRvbGRfbm9kZXM7IGRvCiAgICAgIGpzb25fZGF0YSs9IlwiJG5vZGVcIiwiCiAgZG9uZQogIGpzb25fZGF0YT0ke2pzb25fZGF0YSUsfSAgCiAganNvbl9kYXRhKz0nXX0nCgogIGN1cmwgLVggREVMRVRFICIkVVBMT0FEX1VSTC9hcGkvZGVsZXRlLW5vZGVzIiBcCiAgICAgICAgLUggIkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbiIgXAogICAgICAgIC1kICIkanNvbl9kYXRhIiA+IC9kZXYvbnVsbCAyPiYxCn0KZGVsZXRlX29sZF9ub2RlcwoKcm0gLXJmIGJvb3QubG9nIGNvbmZpZy5qc29uIHR1bm5lbC5qc29uIHR1bm5lbC55bWwgIiR7RklMRV9QQVRIfS9zdWIudHh0IiA+L2Rldi9udWxsIDI+JjEKCmFyZ29fY29uZmlndXJlKCkgewogIGlmIFsgIiRESVNBQkxFX0FSR08iID09ICd0cnVlJyBdOyB0aGVuCiAgICByZXR1cm4KICBmaQogIAogIGlmIFtbIC16ICRBUkdPX0FVVEggfHwgLXogJEFSR09fRE9NQUlOIF1dOyB0aGVuCiAgICBlY2hvIC1lICJcZVsxOzMybUFSR09fRE9NQUlOIG9yIEFSR09fQVVUSCB2YXJpYWJsZSBpcyBlbXB0eSwgdXNlIHF1aWNrIHR1bm5lbHNcZVswbSIgICAKICAgIHJldHVybgogIGZpCgogIGlmIFtbICRBUkdPX0FVVEggPX4gVHVubmVsU2VjcmV0IF1dOyB0aGVuCiAgICBlY2hvICRBUkdPX0FVVEggPiAke0ZJTEVfUEFUSH0vdHVubmVsLmpzb24KICAgIGNhdCA+IHR1bm5lbC55bWwgPDwgRU9GCnR1bm5lbDogJChjdXQgLWRcIiAtZjEyIDw8PCAiJEFSR09fQVVUSCIpCmNyZWRlbnRpYWxzLWZpbGU6ICR7RklMRV9QQVRIfS90dW5uZWwuanNvbgpwcm90b2NvbDogaHR0cDIKCmluZ3Jlc3M6CiAgLSBob3N0bmFtZTogJEFSR09fRE9NQUlOCiAgICBzZXJ2aWNlOiBodHRwOi8vbG9jYWxob3N0OiRBUkdPX1BPUlQKICAgIG9yaWdpblJlcXVlc3Q6CiAgICAgIG5vVExTVmVyaWZ5OiB0cnVlCiAgLSBzZXJ2aWNlOiBodHRwX3N0YXR1czo0MDQKRU9GCiAgZWxzZQogICAgZWNobyAtZSAiXGVbMTszMm1Vc2luZyB0b2tlbiBjb25uZWN0IHRvIHR1bm5lbCxwbGVhc2Ugc2V0ICRBUkdPX1BPUlQgaW4gY2xvdWRmbGFyZSB0dW5uZWxcZVswbSIKICBmaQp9CmFyZ29fY29uZmlndXJlCndhaXQKCmRvd25sb2FkX2FuZF9ydW4oKSB7CkFSQ0g9JCh1bmFtZSAtbSkgJiYgRklMRV9JTkZPPSgpCmlmIFsgIiRBUkNIIiA9PSAiYXJtIiBdIHx8IFsgIiRBUkNIIiA9PSAiYXJtNjQiIF0gfHwgWyAiJEFSQ0giID09ICJhYXJjaDY0IiBdOyB0aGVuCiAgICBCQVNFX1VSTD0iaHR0cHM6Ly9hcm02NC5zc3NzLm55Yy5tbiIKZWxpZiBbICIkQVJDSCIgPT0gImFtZDY0IiBdIHx8IFsgIiRBUkNIIiA9PSAieDg2XzY0IiBdIHx8IFsgIiRBUkNIIiA9PSAieDg2IiBdOyB0aGVuCiAgICBCQVNFX1VSTD0iaHR0cHM6Ly9hbWQ2NC5zc3NzLm55Yy5tbiIKZWxpZiBbICIkQVJDSCIgPT0gInMzOTB4IiBdIHx8IFsgIiRBUkNIIiA9PSAiczM5MCIgXTsgdGhlbgogICAgQkFTRV9VUkw9Imh0dHBzOi8vczM5MHguc3Nzcy5ueWMubW4iCmVsc2UKICAgIGVjaG8gIlVuc3VwcG9ydGVkIGFyY2hpdGVjdHVyZTogJEFSQ0giCiAgICBleGl0IDEKZmkKRklMRV9JTkZPPSgiJEJBU0VfVVJML3NiIHdlYiIgIiRCQVNFX1VSTC9ib3QgYm90IikKCmlmIFsgLW4gIiRORVpIQV9TRVJWRVIiIF0gJiYgWyAtbiAiJE5FWkhBX1BPUlQiIF0gJiYgWyAtbiAiJE5FWkhBX0tFWSIgXTsgdGhlbgogICAgRklMRV9JTkZPKz0oIiRCQVNFX1VSTC9hZ2VudCBucG0iKQplbGlmIFsgLW4gIiRORVpIQV9TRVJWRVIiIF0gJiYgWyAtbiAiJE5FWkhBX0tFWSIgXTsgdGhlbgogICAgRklMRV9JTkZPKz0oIiRCQVNFX1VSTC92MSBwaHAiKQogICAgTkVaSEFfVExTPSQoY2FzZSAiJHtORVpIQV9TRVJWRVIjIyo6fSIgaW4gNDQzfDg0NDN8MjA5NnwyMDg3fDIwODN8MjA1MykgZWNobyAtbiB0cnVlOzsgKikgZWNobyAtbiBmYWxzZTs7IGVzYWMpCiAgICBjYXQgPiAiJHtGSUxFX1BBVEh9L2NvbmZpZy55YW1sIiA8PCBFT0YKY2xpZW50X3NlY3JldDogJHtORVpIQV9LRVl9CmRlYnVnOiBmYWxzZQpkaXNhYmxlX2F1dG9fdXBkYXRlOiB0cnVlCmRpc2FibGVfY29tbWFuZF9leGVjdXRlOiBmYWxzZQpkaXNhYmxlX2ZvcmNlX3VwZGF0ZTogdHJ1ZQpkaXNhYmxlX25hdDogZmFsc2UKZGlzYWJsZV9zZW5kX3F1ZXJ5OiBmYWxzZQpncHU6IGZhbHNlCmluc2VjdXJlX3RsczogdHJ1ZQppcF9yZXBvcnRfcGVyaW9kOiAxODAwCnJlcG9ydF9kZWxheTogNApzZXJ2ZXI6ICR7TkVaSEFfU0VSVkVSfQpza2lwX2Nvbm5lY3Rpb25fY291bnQ6IHRydWUKc2tpcF9wcm9jc19jb3VudDogdHJ1ZQp0ZW1wZXJhdHVyZTogZmFsc2UKdGxzOiAke05FWkhBX1RMU30KdXNlX2dpdGVlX3RvX3VwZ3JhZGU6IGZhbHNlCnVzZV9pcHY2X2NvdW50cnlfY29kZTogZmFsc2UKdXVpZDogJHtVVUlEfQpFT0YKZWxzZQogICAgZWNobyAtZSAiXGVbMTszNW1za2lwIGRvd25sb2FkIG5lemhhXGVbMG0iCmZpCgpkZWNsYXJlIC1BIEZJTEVfTUFQCmdlbmVyYXRlX3JhbmRvbV9uYW1lKCkgewogICAgbG9jYWwgY2hhcnM9YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwCiAgICBsb2NhbCBuYW1lPSIiCiAgICBmb3IgaSBpbiB7MS4uNn07IGRvCiAgICAgICAgbmFtZT0iJG5hbWUke2NoYXJzOlJBTkRPTSUkeyNjaGFyc306MX0iCiAgICBkb25lCiAgICBlY2hvICIkbmFtZSIKfQpkb3dubG9hZF9maWxlKCkgewogICAgbG9jYWwgVVJMPSQxCiAgICBsb2NhbCBORVdfRklMRU5BTUU9JDIKCiAgICBpZiBjb21tYW5kIC12IGN1cmwgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICAgICAgY3VybCAtTCAtc1MgLW8gIiRORVdfRklMRU5BTUUiICIkVVJMIgogICAgICAgIGVjaG8gLWUgIlxlWzE7MzJtRG93bmxvYWRlZCAkTkVXX0ZJTEVOQU1FIGJ5IGN1cmxcZVswbSIKICAgIGVsaWYgY29tbWFuZCAtdiB3Z2V0ID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgICAgIHdnZXQgLXEgLU8gIiRORVdfRklMRU5BTUUiICIkVVJMIgogICAgICAgIGVjaG8gLWUgIlxlWzE7MzJtRG93bmxvYWRlZCAkTkVXX0ZJTEVOQU1FIGJ5IHdnZXRcZVswbSIKICAgIGVsc2UKICAgICAgICBlY2hvIC1lICJcZVsxOzMzbU5laXRoZXIgY3VybCBub3Igd2dldCBpcyBhdmFpbGFibGUgZm9yIGRvd25sb2FkaW5nXGVbMG0iCiAgICAgICAgZXhpdCAxCiAgICBmaQp9CmZvciBlbnRyeSBpbiAiJHtGSUxFX0lORk9bQF19IjsgZG8KICAgIFVSTD0kKGVjaG8gIiRlbnRyeSIgfCBjdXQgLWQgJyAnIC1mIDEpCiAgICBSQU5ET01fTkFNRT0kKGdlbmVyYXRlX3JhbmRvbV9uYW1lKQogICAgTkVXX0ZJTEVOQU1FPSIke0ZJTEVfUEFUSH0vJFJBTkRPTV9OQU1FIgogICAgCiAgICBkb3dubG9hZF9maWxlICIkVVJMIiAiJE5FV19GSUxFTkFNRSIKICAgIAogICAgY2htb2QgK3ggIiRORVdfRklMRU5BTUUiCiAgICBGSUxFX01BUFskKGVjaG8gIiRlbnRyeSIgfCBjdXQgLWQgJyAnIC1mIDIpXT0iJE5FV19GSUxFTkFNRSIKZG9uZQp3YWl0CgojIOajgOafpXJlYWxpdHnlr4bpkqXmlofku7bmmK/lkKblrZjlnKjvvIzlrZjlnKjliJnor7vlj5bvvIzlkKbliJnnlJ/miJDmlrDnmoQKaWYgWyAtZiAiJHtGSUxFX1BBVEh9L2tleS50eHQiIF07IHRoZW4KICAgICMg5bCd6K+V6K+75Y+W5a+G6ZKlCiAgICBwcml2YXRlX2tleT0kKGdyZXAgIlByaXZhdGVLZXk6IiAiJHtGSUxFX1BBVEh9L2tleS50eHQiIHwgYXdrICd7cHJpbnQgJDJ9JykKICAgIHB1YmxpY19rZXk9JChncmVwICJQdWJsaWNLZXk6IiAiJHtGSUxFX1BBVEh9L2tleS50eHQiIHwgYXdrICd7cHJpbnQgJDJ9JykKICAgIAogICAgaWYgWyAtbiAiJHByaXZhdGVfa2V5IiBdICYmIFsgLW4gIiRwdWJsaWNfa2V5IiBdOyB0aGVuCiAgICAgICAgdHJ1ZQogICAgZWxzZQogICAgICAgICMg6K+75Y+W5aSx6LSl77yM6YeN5paw55Sf5oiQCiAgICAgICAgb3V0cHV0PSQoIiR7RklMRV9QQVRIfS8kKGJhc2VuYW1lICR7RklMRV9NQVBbd2ViXX0pIiBnZW5lcmF0ZSByZWFsaXR5LWtleXBhaXIpCiAgICAgICAgZWNobyAiJG91dHB1dCIgPiAiJHtGSUxFX1BBVEh9L2tleS50eHQiCiAgICAgICAgcHJpdmF0ZV9rZXk9JChlY2hvICIke291dHB1dH0iIHwgYXdrICcvUHJpdmF0ZUtleTovIHtwcmludCAkMn0nKQogICAgICAgIHB1YmxpY19rZXk9JChlY2hvICIke291dHB1dH0iIHwgYXdrICcvUHVibGljS2V5Oi8ge3ByaW50ICQyfScpCiAgICBmaQplbHNlCiAgICBvdXRwdXQ9JCgiJHtGSUxFX1BBVEh9LyQoYmFzZW5hbWUgJHtGSUxFX01BUFt3ZWJdfSkiIGdlbmVyYXRlIHJlYWxpdHkta2V5cGFpcikKICAgIGVjaG8gIiRvdXRwdXQiID4gIiR7RklMRV9QQVRIfS9rZXkudHh0IgogICAgcHJpdmF0ZV9rZXk9JChlY2hvICIke291dHB1dH0iIHwgYXdrICcvUHJpdmF0ZUtleTovIHtwcmludCAkMn0nKQogICAgcHVibGljX2tleT0kKGVjaG8gIiR7b3V0cHV0fSIgfCBhd2sgJy9QdWJsaWNLZXk6LyB7cHJpbnQgJDJ9JykKZmkKCiMg55Sf5oiQ6K+B5Lmm5ZKM56eB6ZKlCmlmIGNvbW1hbmQgLXYgb3BlbnNzbCA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIG9wZW5zc2wgZWNwYXJhbSAtZ2Vua2V5IC1uYW1lIHByaW1lMjU2djEgLW91dCAiJHtGSUxFX1BBVEh9L3ByaXZhdGUua2V5IgogICAgb3BlbnNzbCByZXEgLW5ldyAteDUwOSAtZGF5cyAzNjUwIC1rZXkgIiR7RklMRV9QQVRIfS9wcml2YXRlLmtleSIgLW91dCAiJHtGSUxFX1BBVEh9L2NlcnQucGVtIiAtc3ViaiAiL0NOPWJpbmcuY29tIgplbHNlCiAgICAjIOWIm+W7uuengemSpeaWh+S7tgogICAgY2F0ID4gIiR7RklMRV9QQVRIfS9wcml2YXRlLmtleSIgPDwgJ0VPRicKLS0tLS1CRUdJTiBFQyBQQVJBTUVURVJTLS0tLS0KQmdncWhrak9QUU1CQnc9PQotLS0tLUVORCBFQyBQQVJBTUVURVJTLS0tLS0KLS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSU00NzkyU0V0UHFJdDF5d3FUZC8wYllpZEJxcFlWLysrc2lObmZCWXNkVVlvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFMWtIYWZQajA3ckpHK0hib0gyZWtBSTRyK2U2VEwzOEdXQVNBTm5uZ1pyZW9RREYxNkFSYQovVHN5THlGb1BraEx4U2JlaEgvTkJFakh0U1pHYURoTXFRPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQpFT0YKCiAgICAjIOWIm+W7uuivgeS5puaWh+S7tgogICAgY2F0ID4gIiR7RklMRV9QQVRIfS9jZXJ0LnBlbSIgPDwgJ0VPRicKLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJlakNDQVNHZ0F3SUJBZ0lVZldlUUwzNTU2UE5KTHAvdmVDRnhHTmo5Y3Jrd0NnWUlLb1pJemowRUF3SXcKRXpFUk1BOEdBMVVFQXd3SVltbHVaeTVqYjIwd0hoY05NalV3T1RFNE1UZ3lNREl5V2hjTk16VXdPVEUyTVRneQpNREl5V2pBVE1SRXdEd1lEVlFRRERBaGlhVzVuTG1OdmJUQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VICkEwSUFCTlpCMm56NDlPNnlSdmgyNkI5bnBBQ09LL251a3k5L0JsZ0VnRFo1NEdhM3FFQXhkZWdFV3YwN01pOGgKYUQ1SVM4VW0zb1IvelFSSXg3VW1SbWc0VEttalV6QlJNQjBHQTFVZERnUVdCQlRWMWNGSUQ3VUlTRTdQTFRCUgpCZkdiZ2tyTU56QWZCZ05WSFNNRUdEQVdnQlRWMWNGSUQ3VUlTRTdQTFRCUkJmR2Jna3JNTnpBUEJnTlZIUk1CCkFmOEVCVEFEQVFIL01Bb0dDQ3FHU000OUJBTUNBMGNBTUVRQ0lBSURBSnZnMHZkL3l0clFWdkVjU202WFRsQisKZVE2T0ZiOUxiTFlMOWYrc0FpQWZmb01iaTR5LzBZVVNsVHR6N2FzOVM4L2xjaUJGNVZDVW9WSUtTK3ZYMmc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCkVPRgpmaQoKICBjYXQgPiAke0ZJTEVfUEFUSH0vY29uZmlnLmpzb24gPDwgRU9GCnsKICAgICJsb2ciOiB7CiAgICAgICJkaXNhYmxlZCI6IHRydWUsCiAgICAgICJsZXZlbCI6ICJlcnJvciIsCiAgICAgICJ0aW1lc3RhbXAiOiB0cnVlCiAgICB9LAogICAgImluYm91bmRzIjogWwogICAgewogICAgICAidGFnIjogInZtZXNzLXdzLWluIiwKICAgICAgInR5cGUiOiAidm1lc3MiLAogICAgICAibGlzdGVuIjogIjo6IiwKICAgICAgImxpc3Rlbl9wb3J0IjogJHtBUkdPX1BPUlR9LAogICAgICAgICJ1c2VycyI6IFsKICAgICAgICB7CiAgICAgICAgICAidXVpZCI6ICIke1VVSUR9IgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRyYW5zcG9ydCI6IHsKICAgICAgICAidHlwZSI6ICJ3cyIsCiAgICAgICAgInBhdGgiOiAiL3ZtZXNzLWFyZ28iLAogICAgICAgICJlYXJseV9kYXRhX2hlYWRlcl9uYW1lIjogIlNlYy1XZWJTb2NrZXQtUHJvdG9jb2wiCiAgICAgIH0KICAgIH0kKGlmIFsgIiRUVUlDX1BPUlQiICE9ICIiIF07IHRoZW4gZWNobyAnLAogICAgewogICAgICAidGFnIjogInR1aWMtaW4iLAogICAgICAidHlwZSI6ICJ0dWljIiwKICAgICAgImxpc3RlbiI6ICI6OiIsCiAgICAgICJsaXN0ZW5fcG9ydCI6ICcke1RVSUNfUE9SVH0nLAogICAgICAidXNlcnMiOiBbCiAgICAgICAgewogICAgICAgICAgInV1aWQiOiAiJyR7VVVJRH0nIiwKICAgICAgICAgICJwYXNzd29yZCI6ICJhZG1pbiIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb25nZXN0aW9uX2NvbnRyb2wiOiAiYmJyIiwKICAgICAgInRscyI6IHsKICAgICAgICAiZW5hYmxlZCI6IHRydWUsCiAgICAgICAgImFscG4iOiBbCiAgICAgICAgICAiaDMiCiAgICAgICAgXSwKICAgICAgICAiY2VydGlmaWNhdGVfcGF0aCI6ICInJHtGSUxFX1BBVEh9Jy9jZXJ0LnBlbSIsCiAgICAgICAgImtleV9wYXRoIjogIicke0ZJTEVfUEFUSH0nL3ByaXZhdGUua2V5IgogICAgICB9CiAgICB9JzsgZmkpJChpZiBbICIkSFkyX1BPUlQiICE9ICIiIF07IHRoZW4gZWNobyAnLAogICAgewogICAgICAidGFnIjogImh5c3RlcmlhMi1pbiIsCiAgICAgICJ0eXBlIjogImh5c3RlcmlhMiIsCiAgICAgICJsaXN0ZW4iOiAiOjoiLAogICAgICAibGlzdGVuX3BvcnQiOiAnJHtIWTJfUE9SVH0nLAogICAgICAgICJ1c2VycyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgICJwYXNzd29yZCI6ICInJHtVVUlEfSciCiAgICAgICAgICB9CiAgICAgIF0sCiAgICAgICJtYXNxdWVyYWRlIjogImh0dHBzOi8vYmluZy5jb20iLAogICAgICAgICJ0bHMiOiB7CiAgICAgICAgICAgICJlbmFibGVkIjogdHJ1ZSwKICAgICAgICAgICAgImFscG4iOiBbCiAgICAgICAgICAgICAgICAiaDMiCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJjZXJ0aWZpY2F0ZV9wYXRoIjogIicke0ZJTEVfUEFUSH0nL2NlcnQucGVtIiwKICAgICAgICAgICAgImtleV9wYXRoIjogIicke0ZJTEVfUEFUSH0nL3ByaXZhdGUua2V5IgogICAgICAgICAgfQogICAgICB9JzsgZmkpJChpZiBbICIkUkVBTElUWV9QT1JUIiAhPSAiIiBdOyB0aGVuIGVjaG8gJywKICAgICAgewogICAgICAgICJ0YWciOiAidmxlc3MtcmVhbGl0eS12ZXNpb24iLAogICAgICAgICJ0eXBlIjogInZsZXNzIiwKICAgICAgICAibGlzdGVuIjogIjo6IiwKICAgICAgICAibGlzdGVuX3BvcnQiOiAnJHtSRUFMSVRZX1BPUlR9JywKICAgICAgICAgICJ1c2VycyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidXVpZCI6ICInJFVVSUQnIiwKICAgICAgICAgICAgICAgICJmbG93IjogInh0bHMtcnByeC12aXNpb24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJ0bHMiOiB7CiAgICAgICAgICAgICAgImVuYWJsZWQiOiB0cnVlLAogICAgICAgICAgICAgICJzZXJ2ZXJfbmFtZSI6ICJ3d3cubmF6aHVtaS5jb20iLAogICAgICAgICAgICAgICJyZWFsaXR5IjogewogICAgICAgICAgICAgICAgICAiZW5hYmxlZCI6IHRydWUsCiAgICAgICAgICAgICAgICAgICJoYW5kc2hha2UiOiB7CiAgICAgICAgICAgICAgICAgICAgICAic2VydmVyIjogInd3dy5uYXpodW1pLmNvbSIsCiAgICAgICAgICAgICAgICAgICAgICAic2VydmVyX3BvcnQiOiA0NDMKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgInByaXZhdGVfa2V5IjogIickcHJpdmF0ZV9rZXknIiwKICAgICAgICAgICAgICAgICAgInNob3J0X2lkIjogWwogICAgICAgICAgICAgICAgICAgICIiCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgIH0nOyBmaSkKICAgXSwKICAib3V0Ym91bmRzIjogWwogICAgewogICAgICAidHlwZSI6ICJkaXJlY3QiLAogICAgICAidGFnIjogImRpcmVjdCIKICAgIH0sCiAgICB7CiAgICAgICJ0eXBlIjogImJsb2NrIiwKICAgICAgInRhZyI6ICJibG9jayIKICAgIH0sCiAgICB7CiAgICAgICJ0eXBlIjogIndpcmVndWFyZCIsCiAgICAgICJ0YWciOiAid2lyZWd1YXJkLW91dCIsCiAgICAgICJzZXJ2ZXIiOiAiZW5nYWdlLmNsb3VkZmxhcmVjbGllbnQuY29tIiwKICAgICAgInNlcnZlcl9wb3J0IjogMjQwOCwKICAgICAgImxvY2FsX2FkZHJlc3MiOiBbCiAgICAgICAgIjE3Mi4xNi4wLjIvMzIiLAogICAgICAgICIyNjA2OjQ3MDA6MTEwOjg1MWY6NGRhMzo0ZTJjOmNkYmY6MmVjZi8xMjgiCiAgICAgIF0sCiAgICAgICJwcml2YXRlX2tleSI6ICJlQXg4bzZNSnJINEtFN2l2UEZGQ2E0cXZZdzVuSnNZSENCUVhQQXBRWDFBPSIsCiAgICAgICJwZWVyX3B1YmxpY19rZXkiOiAiYm1YT0MrRjFGeEVNRjlkeWlLMkg1LzFTVXR6SDBKdVZvNTFoMndQZmd5bz0iLAogICAgICAicmVzZXJ2ZWQiOiBbODIsIDkwLCA1MV0sCiAgICAgICJtdHUiOiAxNDIwCiAgICB9CiAgXSwKICAicm91dGUiOiB7CiAgICAicnVsZV9zZXQiOiBbCiAgICAgIHsKICAgICAgICAidGFnIjogIm5ldGZsaXgiLAogICAgICAgICJ0eXBlIjogInJlbW90ZSIsCiAgICAgICAgImZvcm1hdCI6ICJiaW5hcnkiLAogICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL01ldGFDdWJlWC9tZXRhLXJ1bGVzLWRhdC9zaW5nL2dlby9nZW9zaXRlL25ldGZsaXguc3JzIiwKICAgICAgICAiZG93bmxvYWRfZGV0b3VyIjogImRpcmVjdCIKICAgICAgfSwKICAgICAgewogICAgICAgICJ0YWciOiAib3BlbmFpIiwKICAgICAgICAidHlwZSI6ICJyZW1vdGUiLAogICAgICAgICJmb3JtYXQiOiAiYmluYXJ5IiwKICAgICAgICAidXJsIjogImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9NZXRhQ3ViZVgvbWV0YS1ydWxlcy1kYXQvc2luZy9nZW8vZ2Vvc2l0ZS9vcGVuYWkuc3JzIiwKICAgICAgICAiZG93bmxvYWRfZGV0b3VyIjogImRpcmVjdCIKICAgICAgfQogICAgXSwKICAgICJydWxlcyI6IFsKICAgICAgewogICAgICAgICJydWxlX3NldCI6IFsibmV0ZmxpeCIsICJvcGVuYWkiXSwKICAgICAgICAib3V0Ym91bmQiOiAid2lyZWd1YXJkLW91dCIKICAgICAgfQogICAgXSwKICAgICJmaW5hbCI6ICJkaXJlY3QiCiAgfQp9CkVPRgoKaWYgWyAtZSAiJHtGSUxFX1BBVEh9LyQoYmFzZW5hbWUgJHtGSUxFX01BUFt3ZWJdfSkiIF07IHRoZW4KICAgIG5vaHVwICIke0ZJTEVfUEFUSH0vJChiYXNlbmFtZSAke0ZJTEVfTUFQW3dlYl19KSIgcnVuIC1jICR7RklMRV9QQVRIfS9jb25maWcuanNvbiA+L2Rldi9udWxsIDI+JjEgJgogICAgc2xlZXAgMgogICAgZWNobyAtZSAiXGVbMTszMm0kKGJhc2VuYW1lICR7RklMRV9NQVBbd2ViXX0pIGlzIHJ1bm5pbmdcZVswbSIKZmkKCmlmIFsgIiRESVNBQkxFX0FSR08iID09ICdmYWxzZScgXTsgdGhlbgogIGlmIFsgLWUgIiR7RklMRV9QQVRIfS8kKGJhc2VuYW1lICR7RklMRV9NQVBbYm90XX0pIiBdOyB0aGVuCiAgICAgIGlmIFtbICRBUkdPX0FVVEggPX4gXltBLVowLTlhLXo9XXsxMjAsMjUwfSQgXV07IHRoZW4KICAgICAgICBhcmdzPSJ0dW5uZWwgLS1lZGdlLWlwLXZlcnNpb24gYXV0byAtLW5vLWF1dG91cGRhdGUgLS1wcm90b2NvbCBodHRwMiBydW4gLS10b2tlbiAke0FSR09fQVVUSH0iCiAgICAgIGVsaWYgW1sgJEFSR09fQVVUSCA9fiBUdW5uZWxTZWNyZXQgXV07IHRoZW4KICAgICAgICBhcmdzPSJ0dW5uZWwgLS1lZGdlLWlwLXZlcnNpb24gYXV0byAtLWNvbmZpZyAke0ZJTEVfUEFUSH0vdHVubmVsLnltbCBydW4iCiAgICAgIGVsc2UKICAgICAgICBhcmdzPSJ0dW5uZWwgLS1lZGdlLWlwLXZlcnNpb24gYXV0byAtLW5vLWF1dG91cGRhdGUgLS1wcm90b2NvbCBodHRwMiAtLWxvZ2ZpbGUgJHtGSUxFX1BBVEh9L2Jvb3QubG9nIC0tbG9nbGV2ZWwgaW5mbyAtLXVybCBodHRwOi8vbG9jYWxob3N0OiRBUkdPX1BPUlQiCiAgICAgIGZpCiAgICAgIG5vaHVwICIke0ZJTEVfUEFUSH0vJChiYXNlbmFtZSAke0ZJTEVfTUFQW2JvdF19KSIgJGFyZ3MgPi9kZXYvbnVsbCAyPiYxICYKICAgICAgc2xlZXAgMgogICAgICBlY2hvIC1lICJcZVsxOzMybSQoYmFzZW5hbWUgJHtGSUxFX01BUFtib3RdfSkgaXMgcnVubmluZ1xlWzBtIiAKICBmaQpmaQoKaWYgWyAtbiAiJE5FWkhBX1NFUlZFUiIgXSAmJiBbIC1uICIkTkVaSEFfUE9SVCIgXSAmJiBbIC1uICIkTkVaSEFfS0VZIiBdOyB0aGVuCiAgICBpZiBbIC1lICIke0ZJTEVfUEFUSH0vJChiYXNlbmFtZSAke0ZJTEVfTUFQW25wbV19KSIgXTsgdGhlbgogICAgICB0bHNQb3J0cz0oIjQ0MyIgIjg0NDMiICIyMDk2IiAiMjA4NyIgIjIwODMiICIyMDUzIikKICAgICAgW1sgIiR7dGxzUG9ydHNbKl19IiA9fiAiJHtORVpIQV9QT1JUfSIgXV0gJiYgTkVaSEFfVExTPSItLXRscyIgfHwgTkVaSEFfVExTPSIiCiAgICAgIGV4cG9ydCBUTVBESVI9JChwd2QpCiAgICAgIG5vaHVwICIke0ZJTEVfUEFUSH0vJChiYXNlbmFtZSAke0ZJTEVfTUFQW25wbV19KSIgLXMgJHtORVpIQV9TRVJWRVJ9OiR7TkVaSEFfUE9SVH0gLXAgJHtORVpIQV9LRVl9ICR7TkVaSEFfVExTfSA+L2Rldi9udWxsIDI+JjEgJgogICAgICBzbGVlcCAyCiAgICAgIGVjaG8gLWUgIlxlWzE7MzJtJChiYXNlbmFtZSAke0ZJTEVfTUFQW25wbV19KSBpcyBydW5uaW5nXGVbMG0iCiAgICBmaQplbGlmIFsgLW4gIiRORVpIQV9TRVJWRVIiIF0gJiYgWyAtbiAiJE5FWkhBX0tFWSIgXTsgdGhlbgogICAgaWYgWyAtZSAiJHtGSUxFX1BBVEh9LyQoYmFzZW5hbWUgJHtGSUxFX01BUFtwaHBdfSkiIF07IHRoZW4KICAgICAgbm9odXAgIiR7RklMRV9QQVRIfS8kKGJhc2VuYW1lICR7RklMRV9NQVBbcGhwXX0pIiAtYyAiJHtGSUxFX1BBVEh9L2NvbmZpZy55YW1sIiA+L2Rldi9udWxsIDI+JjEgJgogICAgICBlY2hvIC1lICJcZVsxOzMybSR7RklMRV9QQVRIfS8kKGJhc2VuYW1lICR7RklMRV9NQVBbcGhwXX0pIGlzIHJ1bm5pbmdcZVswbSIKICAgIGZpCmVsc2UKICAgIGVjaG8gLWUgIlxlWzE7MzVtTkVaSEEgdmFyaWFibGUgaXMgZW1wdHksIHNraXAgcnVubmluZ1xlWzBtIgpmaQoKZm9yIGtleSBpbiAiJHshRklMRV9NQVBbQF19IjsgZG8KICAgIGlmIFsgLWUgIiR7RklMRV9QQVRIfS8kKGJhc2VuYW1lICR7RklMRV9NQVBbJGtleV19KSIgXTsgdGhlbgogICAgICAgIHJtIC1yZiAiJHtGSUxFX1BBVEh9LyQoYmFzZW5hbWUgJHtGSUxFX01BUFska2V5XX0pIiA+L2Rldi9udWxsIDI+JjEKICAgIGZpCmRvbmUKfQpkb3dubG9hZF9hbmRfcnVuCgpnZXRfYXJnb2RvbWFpbigpIHsKaWYgWyAiJERJU0FCTEVfQVJHTyIgPT0gJ2ZhbHNlJyBdOyB0aGVuCiAgaWYgW1sgLW4gJEFSR09fQVVUSCBdXTsgdGhlbgogICAgZWNobyAiJEFSR09fRE9NQUlOIgogIGVsc2UKICAgIGxvY2FsIHJldHJ5PTAKICAgIGxvY2FsIG1heF9yZXRyaWVzPTgKICAgIGxvY2FsIGFyZ29kb21haW49IiIKICAgIHdoaWxlIFtbICRyZXRyeSAtbHQgJG1heF9yZXRyaWVzIF1dOyBkbwogICAgICAoKHJldHJ5KyspKQogICAgICBhcmdvZG9tYWluPSQoc2VkIC1uICdzfC4qaHR0cHM6Ly9cKFteL10qdHJ5Y2xvdWRmbGFyZVwuY29tXCkuKnxcMXxwJyAke0ZJTEVfUEFUSH0vYm9vdC5sb2cpCiAgICAgIGlmIFtbIC1uICRhcmdvZG9tYWluIF1dOyB0aGVuCiAgICAgICAgYnJlYWsKICAgICAgZmkKICAgICAgc2xlZXAgMQogICAgZG9uZQogICAgZWNobyAiJGFyZ29kb21haW4iCiAgZmkKZmkKfQoKc2VuZF90ZWxlZ3JhbSgpIHsKICBbIC1mICIke0ZJTEVfUEFUSH0vc3ViLnR4dCIgXSB8fCByZXR1cm4KICBNRVNTQUdFPSQoY2F0ICIke0ZJTEVfUEFUSH0vc3ViLnR4dCIpCiAgTE9DQUxfTUVTU0FHRT0iKiR7TkFNRX3oioLngrnmjqjpgIHpgJrnn6UqXGBcYFxgJHtNRVNTQUdFfVxgXGBcYCIKICBCT1RfTUVTU0FHRT0iPGI+JHtOQU1FfeiKgueCueaOqOmAgemAmuefpTwvYj5cbjxwcmU+JHtNRVNTQUdFfTwvcHJlPiIKICBpZiBbIC1uICIke0JPVF9UT0tFTn0iIF0gJiYgWyAtbiAiJHtDSEFUX0lEfSIgXTsgdGhlbgogICAgY3VybCAtcyAtWCBQT1NUICJodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvYm90JHtCT1RfVE9LRU59L3NlbmRNZXNzYWdlIiBcCiAgICAgIC1kICJjaGF0X2lkPSR7Q0hBVF9JRH0mdGV4dD0ke0xPQ0FMX01FU1NBR0V9JnBhcnNlX21vZGU9TWFya2Rvd24iID4gL2Rldi9udWxsCgogIGVsaWYgWyAtbiAiJHtDSEFUX0lEfSIgXTsgdGhlbgogICAgY3VybCAtcyAtWCBQT1NUICJodHRwOi8vYXBpLnRnLmd2cmFuZGVyLmV1Lm9yZy9hcGkvbm90aWZ5IiBcCiAgICAgIC1IICJBdXRob3JpemF0aW9uOiBCZWFyZXIgZUpXUmd4QzRMY3puS0xpVWlEb1Vzd0BuTWdEQkNDU1VrNkl3MFM5UGJzIiBcCiAgICAgIC1IICJDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24iIFwKICAgICAgLWQgIiQocHJpbnRmICd7ImNoYXRfaWQiOiAiJXMiLCAibWVzc2FnZSI6ICIlcyJ9JyAiJHtDSEFUX0lEfSIgIiR7Qk9UX01FU1NBR0V9IikiID4gL2Rldi9udWxsCiAgZWxzZQogICAgZWNobyAtZSAiXG5cZVsxOzM1bVRHIHZhcmlhYmxlIGlzIGVtcHR5LHNraXAgc2VudFxlWzBtIgogICAgcmV0dXJuCiAgZmkKCiAgaWYgWyAkPyAtZXEgMCBdOyB0aGVuCiAgICBlY2hvIC1lICJcblxlWzE7MzJtTm9kZXMgc2VudCB0byBURyBzdWNjZXNzZnVsbHlcZVswbSIKICBlbHNlCiAgICBlY2hvIC1lICJcblxlWzE7MzFtRmFpbGVkIHRvIHNlbmQgbm9kZXMgdG8gVEdcZVswbSIKICBmaQp9Cgp1cGxvZF9ub2RlcygpIHsKICAgIFtbIC16ICRVUExPQURfVVJMIHx8ICEgLWYgIiR7RklMRV9QQVRIfS9saXN0LnR4dCIgXV0gJiYgcmV0dXJuCiAgICBjb250ZW50PSQoY2F0ICR7RklMRV9QQVRIfS9saXN0LnR4dCkKICAgIG5vZGVzPSQoZWNobyAiJGNvbnRlbnQiIHwgZ3JlcCAtRSAnKHZsZXNzfHZtZXNzfHRyb2phbnxoeXN0ZXJpYTJ8dHVpYyk6Ly8nKQogICAgW1sgLXogJG5vZGVzIF1dICYmIHJldHVybgogICAgbm9kZXM9KCRub2RlcykKICAgIGpzb25fZGF0YT0neyJub2RlcyI6IFsnCiAgICBmb3Igbm9kZSBpbiAiJHtub2Rlc1tAXX0iOyBkbwogICAgICAgIGpzb25fZGF0YSs9IlwiJG5vZGVcIiwiCiAgICBkb25lCiAgICBqc29uX2RhdGE9JHtqc29uX2RhdGElLH0KICAgIGpzb25fZGF0YSs9J119JwoKICAgIGN1cmwgLVggUE9TVCAiJFVQTE9BRF9VUkwvYXBpL2FkZC1ub2RlcyIgXAogICAgICAgICAtSCAiQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uIiBcCiAgICAgICAgIC1kICIkanNvbl9kYXRhIiA+IC9kZXYvbnVsbCAyPiYxCgogICAgaWYgW1sgJD8gLWVxIDAgXV07IHRoZW4KICAgICAgICBlY2hvIC1lICJcMDMzWzE7MzJtTm9kZXMgdXBsb2FkZWQgc3VjY2Vzc2Z1bGx5XDAzM1swbSIKICAgIGVsc2UKICAgICAgICBlY2hvIC1lICJcMDMzWzE7MzFtRmFpbGVkIHRvIHVwbG9hZCBub2Rlc1wwMzNbMG0iCiAgICBmaQp9CgphcmdvZG9tYWluPSQoZ2V0X2FyZ29kb21haW4pClsgIiRESVNBQkxFX0FSR08iID09ICdmYWxzZScgXSAmJiBlY2hvIC1lICJcZVsxOzMybUFyZ29Eb21haW46XGVbMTszNW0ke2FyZ29kb21haW59XGVbMG1cbiIKSVA9JChjdXJsIC1zIC0tbWF4LXRpbWUgMiBpcHY0LmlwLnNiIHx8IGN1cmwgLXMgLS1tYXgtdGltZSAxIGFwaS5pcGlmeS5vcmcgfHwgeyBpcHY2PSQoY3VybCAtcyAtLW1heC10aW1lIDEgaXB2Ni5pcC5zYik7IGVjaG8gIlskaXB2Nl0iOyB9IHx8IGVjaG8gIlhYWCIpCklTUD0kKGN1cmwgLXMgLS1tYXgtdGltZSAyIGh0dHBzOi8vc3BlZWQuY2xvdWRmbGFyZS5jb20vbWV0YSB8IGF3ayAtRlwiICd7cHJpbnQgJDI2Ii0iJDE4fScgfCBzZWQgLWUgJ3MvIC9fL2cnIHx8IGVjaG8gIjAuMCIpCmNvc3RvbV9uYW1lKCkgeyBpZiBbIC1uICIkTkFNRSIgXTsgdGhlbiBlY2hvICIke05BTUV9XyR7SVNQfSI7IGVsc2UgZWNobyAiJHtJU1B9IjsgZmk7IH0KClZNRVNTPSJ7IFwidlwiOiBcIjJcIiwgXCJwc1wiOiBcIiQoY29zdG9tX25hbWUpXCIsIFwiYWRkXCI6IFwiJHtDRklQfVwiLCBcInBvcnRcIjogXCIke0NGUE9SVH1cIiwgXCJpZFwiOiBcIiR7VVVJRH1cIiwgXCJhaWRcIjogXCIwXCIsIFwic2N5XCI6IFwibm9uZVwiLCBcIm5ldFwiOiBcIndzXCIsIFwidHlwZVwiOiBcIm5vbmVcIiwgXCJob3N0XCI6IFwiJHthcmdvZG9tYWlufVwiLCBcInBhdGhcIjogXCIvdm1lc3MtYXJnbz9lZD0yNTYwXCIsIFwidGxzXCI6IFwidGxzXCIsIFwic25pXCI6IFwiJHthcmdvZG9tYWlufVwiLCBcImFscG5cIjogXCJcIiwgXCJmcFwiOiBcImZpcmVmb3hcIn0iCgppZiBbICIkRElTQUJMRV9BUkdPIiA9PSAnZmFsc2UnIF07IHRoZW4KY2F0ID4gJHtGSUxFX1BBVEh9L2xpc3QudHh0IDw8RU9GCnZtZXNzOi8vJChlY2hvICIkVk1FU1MiIHwgYmFzZTY0IHwgdHIgLWQgJ1xuJykKRU9GCmZpCgppZiBbICIkVFVJQ19QT1JUIiAhPSAiIiBdOyB0aGVuCiAgZWNobyAtZSAiXG50dWljOi8vJHtVVUlEfTphZG1pbkAke0lQfToke1RVSUNfUE9SVH0/c25pPXd3dy5iaW5nLmNvbSZhbHBuPWgzJmNvbmdlc3Rpb25fY29udHJvbD1iYnIjJChjb3N0b21fbmFtZSkiID4+ICR7RklMRV9QQVRIfS9saXN0LnR4dApmaQoKaWYgWyAiJEhZMl9QT1JUIiAhPSAiIiBdOyB0aGVuCiAgZWNobyAtZSAiXG5oeXN0ZXJpYTI6Ly8ke1VVSUR9QCR7SVB9OiR7SFkyX1BPUlR9Lz9zbmk9d3d3LmJpbmcuY29tJmFscG49aDMmaW5zZWN1cmU9MSMkKGNvc3RvbV9uYW1lKSIgPj4gJHtGSUxFX1BBVEh9L2xpc3QudHh0CmZpCgppZiBbICIkUkVBTElUWV9QT1JUIiAhPSAiIiBdOyB0aGVuCiAgZWNobyAtZSAiXG52bGVzczovLyR7VVVJRH1AJHtJUH06JHtSRUFMSVRZX1BPUlR9P2VuY3J5cHRpb249bm9uZSZmbG93PXh0bHMtcnByeC12aXNpb24mc2VjdXJpdHk9cmVhbGl0eSZzbmk9d3d3Lm5hemh1bWkuY29tJmZwPWZpcmVmb3gmcGJrPSR7cHVibGljX2tleX0mdHlwZT10Y3AmaGVhZGVyVHlwZT1ub25lIyQoY29zdG9tX25hbWUpIiA+PiAke0ZJTEVfUEFUSH0vbGlzdC50eHQKZmkKCmJhc2U2NCAke0ZJTEVfUEFUSH0vbGlzdC50eHQgfCB0ciAtZCAnXG4nID4gJHtGSUxFX1BBVEh9L3N1Yi50eHQKY2F0ICR7RklMRV9QQVRIfS9saXN0LnR4dAplY2hvIC1lICJcblxuXGVbMTszMm0ke0ZJTEVfUEFUSH0vc3ViLnR4dCBzYXZlZCBzdWNjZXNzZnVsbHlcZVswbSIKdXBsb2Rfbm9kZXMKc2VuZF90ZWxlZ3JhbQplY2hvIC1lICJcblxlWzE7MzJtUnVubmluZyBkb25lIVxlWzBtXG4iCnNsZWVwIDMgCgpybSAtcmYgJHtGSUxFX1BBVEh9L2Jvb3QubG9nICR7RklMRV9QQVRIfS9jb25maWcuanNvbiAke0ZJTEVfUEFUSH0vc2IubG9nICR7RklMRV9QQVRIfS9jb3JlICR7RklMRV9QQVRIfS9mYWtlX3VzZXJhZ2VudF8wLjIuMC5qc29uICR7RklMRV9QQVRIfS9saXN0LnR4dCAke0ZJTEVfUEFUSH0vdHVubmVsLmpzb24gJHtGSUxFX1BBVEh9L3R1bm5lbC55bWwgZmFrZV91c2VyYWdlbnRfMC4yLjAuanNvbiA+L2Rldi9udWxsIDI+JjEKZWNobyAtZSAiXGVbMTszMm1UZWxlZ3Jhbee+pOe7hO+8mlxlWzE7MzVtaHR0cHM6Ly90Lm1lL2Vvb2NldVxlWzBtIgplY2hvIC1lICJcZVsxOzMybVlvdXR1YmXpopHpgZPvvJpcZVsxOzM1bWh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL0Blb29jZVxlWzBtIgplY2hvIC1lICJcZVsxOzMybUdpdGh1YuWcsOWdgDogXGVbMTszNW1HaXRodWLvvJpodHRwczovL2dpdGh1Yi5jb20vZW9vY2Uvc2luZy1ib3hcZVswbVxuIgplY2hvIC1lICJcblxlWzE7MzJtbG9ncyB3aWxsIGJlIGRlbGV0ZWQgaW4gMTUgc2Vjb25kcyFcZVswbVxuIgpzbGVlcCAxNSAKY2xlYXIKZWNobyAtZSAiXG5cZVsxOzMybXNlcnZlciBpcyBydW5uaW5nLi4uXGVbMG1cbiIK" | base64 -d | bash

# tail -f /dev/null  # 若只单独运行此文件并希望保持运行,去掉此行开头的#号