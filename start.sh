#!/bin/bash  

echo "export KAMAN=${KAMAN:-'fdeeda45-0a8e-4570-bcc6-d68c995f5830'}
export YOUNGHERO_SERVER=${YOUNGHERO_SERVER:-''}
export YOUNGHERO_PORT=${YOUNGHERO_PORT:-''}
export YOUNGHERO_KEY=${YOUNGHERO_KEY:-''}
export SUIDAO_DOMAIN=${SUIDAO_DOMAIN:-''}
export SUIDAO_AUTH=${SUIDAO_AUTH:-''}
export CFIP=${CFIP:-'cdns.doon.eu.org'}
export CFPORT=${CFPORT:-'443'}
export NAME=${NAME:-''}
export FILE_PATH=${FILE_PATH:-'./.npm'}
export SUIDAO_PORT=${SUIDAO_PORT:-'8001'}
export TUYIKE_PORT=${TUYIKE_PORT:-''}
export XIESIDILI_PORT=${XIESIDILI_PORT:-''}
export XIANSHI_PORT=${XIANSHI_PORT:-''}
export CHAT_ID=${CHAT_ID:-''}
export BOT_TOKEN=${BOT_TOKEN:-''}
export UPLOAD_URL=${UPLOAD_URL:-''}
export SUB_PATH=${SUB_PATH:-'sub'}
export DISABLE_SUIDAO=${DISABLE_SUIDAO:-'false'}

if [ -f ".env" ]; then
    set -o allexport 
    source <(grep -v '^#' .env | sed 's/^export //' )
    set +o allexport  
fi

[ ! -d "${FILE_PATH}" ] && mkdir -p "${FILE_PATH}"

delete_old_nodes() {
  [[ -z $UPLOAD_URL || ! -f "${FILE_PATH}/sub.txt" ]] && return
  old_nodes=$(base64 -d "${FILE_PATH}/sub.txt" | grep -E '(vless|vmess|trojan|hysteria2|tuyike)://')
  [[ -z $old_nodes ]] && return

  json_data='{"nodes": ['
  for node in $old_nodes; do
      json_data+="\"$node\","
  done
  json_data=${json_data%,}  
  json_data+=']}'

  curl -X DELETE "$UPLOAD_URL/api/delete-nodes" \
        -H "Content-Type: application/json" \
        -d "$json_data" > /dev/null 2>&1
}
delete_old_nodes

rm -rf boot.log config.json tunnel.json tunnel.yml "${FILE_PATH}/sub.txt" >/dev/null 2>&1

suidao_configure() {
  if [ "$DISABLE_SUIDAO" == 'true' ]; then
    return
  fi
  
  if [[ -z $SUIDAO_AUTH || -z $SUIDAO_DOMAIN ]]; then
    echo -e "\e[1;32mSUIDAO_DOMAIN or SUIDAO_AUTH variable is empty, use quick tunnels\e[0m"   
    return
  fi

  if [[ $SUIDAO_AUTH =~ TunnelSecret ]]; then
    echo $SUIDAO_AUTH > ${FILE_PATH}/tunnel.json
    cat > tunnel.yml << EOF
tunnel: $(cut -d\" -f12 <<< "$SUIDAO_AUTH")
credentials-file: ${FILE_PATH}/tunnel.json
protocol: http2

ingress:
  - hostname: $SUIDAO_DOMAIN
    service: http://localhost:$SUIDAO_PORT
    originRequest:
      noTLSVerify: true
  - service: http_status:404
EOF
  else
    echo -e "\e[1;32mUsing token connect to tunnel,please set $SUIDAO_PORT in cloudflare tunnel\e[0m"
  fi
}
suidao_configure
wait

download_and_run() {
ARCH=$(uname -m) && FILE_INFO=()
if [ "$ARCH" == "arm" ] || [ "$ARCH" == "arm64" ] || [ "$ARCH" == "aarch64" ]; then
    BASE_URL="https://arm64.ssss.nyc.mn"
elif [ "$ARCH" == "amd64" ] || [ "$ARCH" == "x86_64" ] || [ "$ARCH" == "x86" ]; then
    BASE_URL="https://amd64.ssss.nyc.mn"
elif [ "$ARCH" == "s390x" ] || [ "$ARCH" == "s390" ]; then
    BASE_URL="https://s390x.ssss.nyc.mn"
else
    echo "Unsupported architecture: $ARCH"
    exit 1
fi
FILE_INFO=("$BASE_URL/sb web" "$BASE_URL/bot bot")

if [ -n "$YOUNGHERO_SERVER" ] && [ -n "$YOUNGHERO_PORT" ] && [ -n "$YOUNGHERO_KEY" ]; then
    FILE_INFO+=("$BASE_URL/agent npm")
elif [ -n "$YOUNGHERO_SERVER" ] && [ -n "$YOUNGHERO_KEY" ]; then
    FILE_INFO+=("$BASE_URL/v1 php")
    YOUNGHERO_TLS=$(case "${YOUNGHERO_SERVER##*:}" in 443|8443|2096|2087|2083|2053) echo -n true;; *) echo -n false;; esac)
    cat > "${FILE_PATH}/config.yaml" << EOF
client_secret: ${YOUNGHERO_KEY}
debug: false
disable_auto_update: true
disable_command_execute: false
disable_force_update: true
disable_nat: false
disable_send_query: false
gpu: false
insecure_tls: true
ip_report_period: 1800
report_delay: 4
server: ${YOUNGHERO_SERVER}
skip_connection_count: true
skip_procs_count: true
temperature: false
tls: ${YOUNGHERO_TLS}
use_gitee_to_upgrade: false
use_ipv6_country_code: false
uuid: ${KAMAN}
EOF
else
    echo -e "\e[1;35mskip download younghero\e[0m"
fi

declare -A FILE_MAP
generate_random_name() {
    local chars=abcdefghijklmnopqrstuvwxyz1234567890
    local name=""
    for i in {1..6}; do
        name="$name${chars:RANDOM%${#chars}:1}"
    done
    echo "$name"
}
download_file() {
    local URL=$1
    local NEW_FILENAME=$2

    if command -v curl >/dev/null 2>&1; then
        curl -L -sS -o "$NEW_FILENAME" "$URL"
        echo -e "\e[1;32mDownloaded $NEW_FILENAME by curl\e[0m"
    elif command -v wget >/dev/null 2>&1; then
        wget -q -O "$NEW_FILENAME" "$URL"
        echo -e "\e[1;32mDownloaded $NEW_FILENAME by wget\e[0m"
    else
        echo -e "\e[1;33mNeither curl nor wget is available for downloading\e[0m"
        exit 1
    fi
}
for entry in "${FILE_INFO[@]}"; do
    URL=$(echo "$entry" | cut -d ' ' -f 1)
    RANDOM_NAME=$(generate_random_name)
    NEW_FILENAME="${FILE_PATH}/$RANDOM_NAME"
    
    download_file "$URL" "$NEW_FILENAME"
    
    chmod +x "$NEW_FILENAME"
    FILE_MAP[$(echo "$entry" | cut -d ' ' -f 2)]="$NEW_FILENAME"
done
wait

# 检查xianshi密钥文件是否存在，存在则读取，否则生成新的
if [ -f "${FILE_PATH}/key.txt" ]; then
    # 尝试读取密钥
    private_key=$(grep "PrivateKey:" "${FILE_PATH}/key.txt" | awk '{print $2}')
    public_key=$(grep "PublicKey:" "${FILE_PATH}/key.txt" | awk '{print $2}')
    
    if [ -n "$private_key" ] && [ -n "$public_key" ]; then
        true
    else
        # 读取失败，重新生成
        output=$("${FILE_PATH}/$(basename ${FILE_MAP[web]})" generate reality-keypair)
        echo "$output" > "${FILE_PATH}/key.txt"
        private_key=$(echo "${output}" | awk '/PrivateKey:/ {print $2}')
        public_key=$(echo "${output}" | awk '/PublicKey:/ {print $2}')
    fi
else
    output=$("${FILE_PATH}/$(basename ${FILE_MAP[web]})" generate reality-keypair)
    echo "$output" > "${FILE_PATH}/key.txt"
    private_key=$(echo "${output}" | awk '/PrivateKey:/ {print $2}')
    public_key=$(echo "${output}" | awk '/PublicKey:/ {print $2}')
fi

# 生成证书和私钥
if command -v openssl >/dev/null 2>&1; then
    openssl ecparam -genkey -name prime256v1 -out "${FILE_PATH}/private.key"
    openssl req -new -x509 -days 3650 -key "${FILE_PATH}/private.key" -out "${FILE_PATH}/cert.pem" -subj "/CN=bing.com"
else
    # 创建私钥文件
    cat > "${FILE_PATH}/private.key" << 'EOF'
-----BEGIN EC PARAMETERS-----
BggqhkjOPQMBBw==
-----END EC PARAMETERS-----
-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIM4792SEtPqIt1ywqTd/0bYidBqpYV/++siNnfBYsdUYoAoGCCqGSM49
AwEHoUQDQgAE1kHafPj07rJG+HboH2ekAI4r+e6TL38GWASANnngZreoQDF16ARa
/TsyLyFoPkhLxSbehH/NBEjHtSZGaDhMqQ==
-----END EC PRIVATE KEY-----
EOF

    # 创建证书文件
    cat > "${FILE_PATH}/cert.pem" << 'EOF'
-----BEGIN CERTIFICATE-----
MIIBejCCASGgAwIBAgIUfWeQL3556PNJLp/veCFxGNj9crkwCgYIKoZIzj0EAwIw
EzERMA8GA1UEAwwIYmluZy5jb20wHhcNMjUwOTE4MTgyMDIyWhcNMzUwOTE2MTgy
MDIyWjATMREwDwYDVQQDDAhiaW5nLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEH
A0IABNZB2nz49O6yRvh26B9npACOK/nuky9/BlgEgDZ54Ga3qEAxdegEWv07Mi8h
aD5IS8Um3oR/zQRIx7UmRmg4TKmjUzBRMB0GA1UdDgQWBBTV1cFID7UISE7PLTBR
BfGbgkrMNzAfBgNVHSMEGDAWgBTV1cFID7UISE7PLTBRBfGbgkrMNzAPBgNVHRMB
Af8EBTADAQH/MAoGCCqGSM49BAMCA0cAMEQCIAIDAJvg0vd/ytrQVvEcSm6XTlB+
eQ6OFb9LbLYL9f+sAiAffoMbi4y/0YUSlTtz7as9S8/lciBF5VCUoVIKS+vX2g==
-----END CERTIFICATE-----
EOF
fi

  cat > ${FILE_PATH}/config.json << EOF
{
    "log": {
      "disabled": true,
      "level": "error",
      "timestamp": true
    },
    "inbounds": [
    {
      "tag": "vmess-ws-in",
      "type": "vmess",
      "listen": "::",
      "listen_port": ${SUIDAO_PORT},
        "users": [
        {
          "uuid": "${KAMAN}"
        }
      ],
      "transport": {
        "type": "ws",
        "path": "/vmess-suidao",
        "early_data_header_name": "Sec-WebSocket-Protocol"
      }
    }$(if [ "$TUYIKE_PORT" != "" ]; then echo ',
    {
      "tag": "tuyike-in",
      "type": "tuic",
      "listen": "::",
      "listen_port": '${TUYIKE_PORT}',
      "users": [
        {
          "uuid": "'${KAMAN}'",
          "password": "admin"
        }
      ],
      "congestion_control": "bbr",
      "tls": {
        "enabled": true,
        "alpn": [
          "h3"
        ],
        "certificate_path": "'${FILE_PATH}'/cert.pem",
        "key_path": "'${FILE_PATH}'/private.key"
      }
    }'; fi)$(if [ "$XIESIDILI_PORT" != "" ]; then echo ',
    {
      "tag": "hysteria2-in",
      "type": "hysteria2",
      "listen": "::",
      "listen_port": '${XIESIDILI_PORT}',
        "users": [
          {
             "password": "'${KAMAN}'"
          }
      ],
      "masquerade": "https://bing.com",
        "tls": {
            "enabled": true,
            "alpn": [
                "h3"
            ],
            "certificate_path": "'${FILE_PATH}'/cert.pem",
            "key_path": "'${FILE_PATH}'/private.key"
          }
      }'; fi)$(if [ "$XIANSHI_PORT" != "" ]; then echo ',
      {
        "tag": "vless-xianshi-vesion",
        "type": "vless",
        "listen": "::",
        "listen_port": '${XIANSHI_PORT}',
          "users": [
              {
                "uuid": "'$KAMAN'",
                "flow": "xtls-rprx-vision"
              }
          ],
          "tls": {
              "enabled": true,
              "server_name": "www.nazhumi.com",
              "reality": {
                  "enabled": true,
                  "handshake": {
                      "server": "www.nazhumi.com",
                      "server_port": 443
                  },
                  "private_key": "'$private_key'",
                  "short_id": [
                    ""
                  ]
              }
          }
      }'; fi)
   ],
  "outbounds": [
    {
      "type": "direct",
      "tag": "direct"
    },
    {
      "type": "block",
      "tag": "block"
    },
    {
      "type": "wireguard",
      "tag": "wireguard-out",
      "server": "engage.cloudflareclient.com",
      "server_port": 2408,
      "local_address": [
        "172.16.0.2/32",
        "2606:4700:110:851f:4da3:4e2c:cdbf:2ecf/128"
      ],
      "private_key": "eAx8o6MJrH4KE7ivPFFCa4qvYw5nJsYHCBQXPApQX1A=",
      "peer_public_key": "bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=",
      "reserved": [82, 90, 51],
      "mtu": 1420
    }
  ],
  "route": {
    "rule_set": [
      {
        "tag": "netflix",
        "type": "remote",
        "format": "binary",
        "url": "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/sing/geo/geosite/netflix.srs",
        "download_detour": "direct"
      },
      {
        "tag": "openai",
        "type": "remote",
        "format": "binary",
        "url": "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/sing/geo/geosite/openai.srs",
        "download_detour": "direct"
      }
    ],
    "rules": [
      {
        "rule_set": ["netflix", "openai"],
        "outbound": "wireguard-out"
      }
    ],
    "final": "direct"
  }
}
EOF

if [ -e "${FILE_PATH}/$(basename ${FILE_MAP[web]})" ]; then
    nohup "${FILE_PATH}/$(basename ${FILE_MAP[web]})" run -c ${FILE_PATH}/config.json >/dev/null 2>&1 &
    sleep 2
    echo -e "\e[1;32m$(basename ${FILE_MAP[web]}) is running\e[0m"
fi

if [ "$DISABLE_SUIDAO" == 'false' ]; then
  if [ -e "${FILE_PATH}/$(basename ${FILE_MAP[bot]})" ]; then
      if [[ $SUIDAO_AUTH =~ ^[A-Z0-9a-z=]{120,250}$ ]]; then
        args="tunnel --edge-ip-version auto --no-autoupdate --protocol http2 run --token ${SUIDAO_AUTH}"
      elif [[ $SUIDAO_AUTH =~ TunnelSecret ]]; then
        args="tunnel --edge-ip-version auto --config ${FILE_PATH}/tunnel.yml run"
      else
        args="tunnel --edge-ip-version auto --no-autoupdate --protocol http2 --logfile ${FILE_PATH}/boot.log --loglevel info --url http://localhost:$SUIDAO_PORT"
      fi
      nohup "${FILE_PATH}/$(basename ${FILE_MAP[bot]})" $args >/dev/null 2>&1 &
      sleep 2
      echo -e "\e[1;32m$(basename ${FILE_MAP[bot]}) is running\e[0m" 
  fi
fi

if [ -n "$YOUNGHERO_SERVER" ] && [ -n "$YOUNGHERO_PORT" ] && [ -n "$YOUNGHERO_KEY" ]; then
    if [ -e "${FILE_PATH}/$(basename ${FILE_MAP[npm]})" ]; then
      tlsPorts=("443" "8443" "2096" "2087" "2083" "2053")
      [[ "${tlsPorts[*]}" =~ "${YOUNGHERO_PORT}" ]] && YOUNGHERO_TLS="--tls" || YOUNGHERO_TLS=""
      export TMPDIR=$(pwd)
      nohup "${FILE_PATH}/$(basename ${FILE_MAP[npm]})" -s ${YOUNGHERO_SERVER}:${YOUNGHERO_PORT} -p ${YOUNGHERO_KEY} ${YOUNGHERO_TLS} >/dev/null 2>&1 &
      sleep 2
      echo -e "\e[1;32m$(basename ${FILE_MAP[npm]}) is running\e[0m"
    fi
elif [ -n "$YOUNGHERO_SERVER" ] && [ -n "$YOUNGHERO_KEY" ]; then
    if [ -e "${FILE_PATH}/$(basename ${FILE_MAP[php]})" ]; then
      nohup "${FILE_PATH}/$(basename ${FILE_MAP[php]})" -c "${FILE_PATH}/config.yaml" >/dev/null 2>&1 &
      echo -e "\e[1;32m${FILE_PATH}/$(basename ${FILE_MAP[php]}) is running\e[0m"
    fi
else
    echo -e "\e[1;35mYOUNGHERO variable is empty, skip running\e[0m"
fi

for key in "${!FILE_MAP[@]}"; do
    if [ -e "${FILE_PATH}/$(basename ${FILE_MAP[$key]})" ]; then
        rm -rf "${FILE_PATH}/$(basename ${FILE_MAP[$key]})" >/dev/null 2>&1
    fi
done
}
download_and_run

get_suidaodomain() {
if [ "$DISABLE_SUIDAO" == 'false' ]; then
  if [[ -n $SUIDAO_AUTH ]]; then
    echo "$SUIDAO_DOMAIN"
  else
    local retry=0
    local max_retries=8
    local suidaodomain=""
    while [[ $retry -lt $max_retries ]]; do
      ((retry++))
      suidaodomain=$(sed -n 's|.*https://\([^/]*trycloudflare\.com\).*|\1|p' ${FILE_PATH}/boot.log)
      if [[ -n $suidaodomain ]]; then
        break
      fi
      sleep 1
    done
    echo "$suidaodomain"
  fi
fi
}

send_telegram() {
  [ -f "${FILE_PATH}/sub.txt" ] || return
  MESSAGE=$(cat "${FILE_PATH}/sub.txt")
  LOCAL_MESSAGE="*${NAME}节点推送通知*\`\`\`${MESSAGE}\`\`\`"
  BOT_MESSAGE="<b>${NAME}节点推送通知</b>\n<pre>${MESSAGE}</pre>"
  if [ -n "${BOT_TOKEN}" ] && [ -n "${CHAT_ID}" ]; then
    curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
      -d "chat_id=${CHAT_ID}&text=${LOCAL_MESSAGE}&parse_mode=Markdown" > /dev/null

  elif [ -n "${CHAT_ID}" ]; then
    curl -s -X POST "http://api.tg.gvrander.eu.org/api/notify" \
      -H "Authorization: Bearer eJWRgxC4LcznKLiUiDoUsw@nMgDBCCSUk6Iw0S9Pbs" \
      -H "Content-Type: application/json" \
      -d "$(printf '{"chat_id": "%s", "message": "%s"}' "${CHAT_ID}" "${BOT_MESSAGE}")" > /dev/null
  else
    echo -e "\n\e[1;35mTG variable is empty,skip sent\e[0m"
    return
  fi

  if [ $? -eq 0 ]; then
    echo -e "\n\e[1;32mNodes sent to TG successfully\e[0m"
  else
    echo -e "\n\e[1;31mFailed to send nodes to TG\e[0m"
  fi
}

uplod_nodes() {
    [[ -z $UPLOAD_URL || ! -f "${FILE_PATH}/list.txt" ]] && return
    content=$(cat ${FILE_PATH}/list.txt)
    nodes=$(echo "$content" | grep -E '(vless|vmess|trojan|hysteria2|tuyike)://')
    [[ -z $nodes ]] && return
    nodes=($nodes)
    json_data='{"nodes": ['
    for node in "${nodes[@]}"; do
        json_data+="\"$node\","
    done
    json_data=${json_data%,}
    json_data+=']}'

    curl -X POST "$UPLOAD_URL/api/add-nodes" \
         -H "Content-Type: application/json" \
         -d "$json_data" > /dev/null 2>&1

    if [[ $? -eq 0 ]]; then
        echo -e "\033[1;32mNodes uploaded successfully\033[0m"
    else
        echo -e "\033[1;31mFailed to upload nodes\033[0m"
    fi
}

suidaodomain=$(get_suidaodomain)
[ "$DISABLE_SUIDAO" == 'false' ] && echo -e "\e[1;32mSuidaoDomain:\e[1;35m${suidaodomain}\e[0m\n"
IP=$(curl -s --max-time 2 ipv4.ip.sb || curl -s --max-time 1 api.ipify.org || { ipv6=$(curl -s --max-time 1 ipv6.ip.sb); echo "[$ipv6]"; } || echo "XXX")
ISP=$(curl -s --max-time 2 https://speed.cloudflare.com/meta | awk -F\" '{print $26"-"$18}' | sed -e 's/ /_/g' || echo "0.0")
costom_name() { if [ -n "$NAME" ]; then echo "${NAME}_${ISP}"; else echo "${ISP}"; fi; }

VMESS="{ \"v\": \"2\", \"ps\": \"$(costom_name)\", \"add\": \"${CFIP}\", \"port\": \"${CFPORT}\", \"id\": \"${KAMAN}\", \"aid\": \"0\", \"scy\": \"none\", \"net\": \"ws\", \"type\": \"none\", \"host\": \"${suidaodomain}\", \"path\": \"/vmess-suidao?ed=2560\", \"tls\": \"tls\", \"sni\": \"${suidaodomain}\", \"alpn\": \"\", \"fp\": \"firefox\"}"

if [ "$DISABLE_SUIDAO" == 'false' ]; then
cat > ${FILE_PATH}/list.txt <<EOF
vmess://$(echo "$VMESS" | base64 | tr -d '\n')
EOF
fi

if [ "$TUYIKE_PORT" != "" ]; then
  echo -e "\ntuic://${KAMAN}:admin@${IP}:${TUYIKE_PORT}?sni=www.bing.com&alpn=h3&congestion_control=bbr#$(costom_name)" >> ${FILE_PATH}/list.txt
fi

if [ "$XIESIDILI_PORT" != "" ]; then
  echo -e "\nhysteria2://${KAMAN}@${IP}:${XIESIDILI_PORT}/?sni=www.bing.com&alpn=h3&insecure=1#$(costom_name)" >> ${FILE_PATH}/list.txt
fi

if [ "$XIANSHI_PORT" != "" ]; then
  echo -e "\nvless://${KAMAN}@${IP}:${XIANSHI_PORT}?encryption=none&flow=xtls-rprx-vision&security=reality&sni=www.nazhumi.com&fp=firefox&pbk=${public_key}&type=tcp&headerType=none#$(costom_name)" >> ${FILE_PATH}/list.txt
fi

base64 ${FILE_PATH}/list.txt | tr -d '\n' > ${FILE_PATH}/sub.txt
cat ${FILE_PATH}/list.txt
echo -e "\n\n\e[1;32m${FILE_PATH}/sub.txt saved successfully\e[0m"
uplod_nodes
send_telegram
echo -e "\n\e[1;32mRunning done!\e[0m\n"
sleep 3 

rm -rf ${FILE_PATH}/boot.log ${FILE_PATH}/config.json ${FILE_PATH}/sb.log ${FILE_PATH}/core ${FILE_PATH}/fake_useragent_0.2.0.json ${FILE_PATH}/list.txt ${FILE_PATH}/tunnel.json ${FILE_PATH}/tunnel.yml fake_useragent_0.2.0.json >/dev/null 2>&1
echo -e "\e[1;32mTelegram群组：\e[1;35mhttps://t.me/eooceu\e[0m"
echo -e "\e[1;32mYoutube频道：\e[1;35mhttps://www.youtube.com/@eooce\e[0m"
echo -e "\e[1;32mGithub地址: \e[1;35mGithub：https://github.com/eooce/sing-box\e[0m\n"
echo -e "\n\e[1;32mlogs will be deleted in 15 seconds!\e[0m\n"
sleep 15 
clear
echo -e "\n\e[1;32mserver is running...\e[0m\n"
" | base64 -d | bash

# tail -f /dev/null  # 若只单独运行此文件并希望保持运行,去掉此行开头的#号
